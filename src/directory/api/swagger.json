{
  "openapi": "3.0.0",
  "paths": {
    "/contexts": {
      "post": {
        "operationId": "create",
        "summary": "",
        "description": "Create a new context",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContextsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Context created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextDto"
                }
              }
            }
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "DuplicatedContextException": {
                    "description": "Context \"slug\" already exists for tenant \"tenantId\".",
                    "value": {
                      "statusCode": 409,
                      "message": "Context \"slug\" already exists for tenant \"tenantId\".",
                      "error": "Conflict"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Context \"slug\" already exists for tenant \"tenantId\"."
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Contexts"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "listAll",
        "summary": "",
        "description": "Returns all contexts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all contexts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContextDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          }
        },
        "tags": [
          "Contexts"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/contexts/{id}": {
      "patch": {
        "operationId": "update",
        "summary": "",
        "description": "Update a context by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContextsDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin"
          },
          "404": {
            "description": "Not found context to update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicatedContextException"
                }
              }
            }
          }
        },
        "tags": [
          "Contexts"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "delete",
        "summary": "",
        "description": "Delete a context by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin"
          }
        },
        "tags": [
          "Contexts"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/data-types": {
      "post": {
        "operationId": "create",
        "summary": "",
        "description": "Create a new data type",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypesDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataTypesDto"
                }
              }
            }
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          }
        },
        "tags": [
          "Data Types"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/data-types/{tenantId}": {
      "get": {
        "operationId": "listBy",
        "summary": "",
        "description": "Get all data types for a tenant",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataTypesDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          }
        },
        "tags": [
          "Data Types"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/data-types/{tenantId}/{dataTypeId}": {
      "patch": {
        "operationId": "update",
        "summary": "",
        "description": "Updates a data type by tenant and data type id",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypesDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          }
        },
        "tags": [
          "Data Types"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/users-documents": {
      "post": {
        "operationId": "create",
        "summary": "",
        "description": "Create a new user document",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDocumentsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDocumentsDto"
                }
              }
            }
          }
        },
        "tags": [
          "User Documents"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users-documents/{tenantId}/{userId}": {
      "get": {
        "operationId": "listBy",
        "summary": "",
        "description": "Returns all user documents by tenant and user",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDocumentsDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User Documents"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users-documents/{tenantId}/{documentId}": {
      "patch": {
        "operationId": "update",
        "summary": "",
        "description": "Updates a user document by id",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDocumentsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User Documents"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users-documents/{tenantId}/generate-signature": {
      "post": {
        "operationId": "getSignatureToUploadDocument",
        "summary": "",
        "description": "Generate a signature for upload a document",
        "deprecated": true,
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUploadSignatureDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUploadSignatureResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User Documents"
        ]
      }
    },
    "/tenant-params": {
      "post": {
        "operationId": "create",
        "summary": "",
        "description": "Create a new tenant params",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantParamsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantParamsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Integration API key or JWT required"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "TenantParamsAlreadyRegisteredException": {
                    "description": "Tenant Params already registered: dataTypeId: \"dataTypeId\", contextId: \"contextId\", tenantId: \"tenantId\"",
                    "value": {
                      "statusCode": 409,
                      "message": "Tenant Params already registered: dataTypeId: \"dataTypeId\", contextId: \"contextId\", tenantId: \"tenantId\"",
                      "error": "Conflict"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Tenant Params already registered: dataTypeId: \"dataTypeId\", contextId: \"contextId\", tenantId: \"tenantId\""
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Tenant Params"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tenant-params/{tenantId}": {
      "get": {
        "operationId": "listBy",
        "summary": "",
        "description": "Get all tenant param by tenant",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantParamsDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tenant Params"
        ]
      }
    },
    "/tenant-params/{tenantId}/{contextId}": {
      "get": {
        "operationId": "listByContext",
        "summary": "",
        "description": "Get all tenant param by tenant and context",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantParamsDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tenant Params"
        ]
      }
    },
    "/tenant-params/{tenantId}/slug/{slug}": {
      "get": {
        "operationId": "listBySlugContext",
        "summary": "",
        "description": "Get all tenant param by tenant and context",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantParamsDto"
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "TenantContextDisabledException": {
                    "description": "Tenant context \"slug\" is disabled from \"tenant\"",
                    "value": {
                      "statusCode": 404,
                      "message": "Tenant context \"slug\" is disabled from \"tenant\"",
                      "error": "Not Found"
                    }
                  },
                  "ContextBySlugNotFoundException": {
                    "description": "Context slug not exist from tenant or global.",
                    "value": {
                      "statusCode": 404,
                      "message": "Context slug not exist from tenant or global.",
                      "error": "Not Found"
                    }
                  },
                  "TenantContextNotFoundException": {
                    "description": "Tenant context \"slug\" not found from \"tenant\"",
                    "value": {
                      "statusCode": 404,
                      "message": "Tenant context \"slug\" not found from \"tenant\"",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Tenant context \"slug\" is disabled from \"tenant\""
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Tenant Params"
        ]
      }
    },
    "/tenant-params/{tenantId}/{tenantParamsId}": {
      "patch": {
        "operationId": "update",
        "summary": "",
        "description": "Updates a tenant params",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantParamsId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenantParamsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "description": "Unauthorized - Integration API key or JWT required"
          }
        },
        "tags": [
          "Tenant Params"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tenant-contexts": {
      "post": {
        "operationId": "create",
        "summary": "",
        "description": "Create a new context for a tenant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantContextDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantContextsDto"
                }
              }
            }
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "ContextNotFoundException": {
                    "description": "Context \"contextId\" not found.",
                    "value": {
                      "statusCode": 404,
                      "message": "Context \"contextId\" not found.",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Context \"contextId\" not found."
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Tenant Contexts"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tenant-contexts/{tenantId}": {
      "get": {
        "operationId": "listBy",
        "summary": "",
        "description": "Returns all contexts for a tenant",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantContextsDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          }
        },
        "tags": [
          "Tenant Contexts"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tenant-contexts/{tenantId}/{contextId}": {
      "delete": {
        "operationId": "delete",
        "summary": "",
        "description": "Delete a context by tenant and context id",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "TenantContextNotFoundException": {
                    "description": "Tenant context \"contextId\" not found from \"tenantId\"",
                    "value": {
                      "statusCode": 404,
                      "message": "Tenant context \"contextId\" not found from \"tenantId\"",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Tenant context \"contextId\" not found from \"tenantId\""
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Tenant Contexts"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tenant-contexts/{tenantId}/{slug}/activate": {
      "patch": {
        "operationId": "activateBySlug",
        "summary": "",
        "description": "Activate a context by tenant and slug",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "ContextBySlugNotFoundException": {
                    "description": "Context slug not exist from tenantId or global.",
                    "value": {
                      "statusCode": 404,
                      "message": "Context slug not exist from tenantId or global.",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Context slug not exist from tenantId or global."
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Tenant Contexts"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tenant-contexts/{tenantId}/slug/{slug}/deactivate": {
      "patch": {
        "operationId": "deactivateBySlug",
        "summary": "",
        "description": "Deactivate a context by tenant and slug",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "ContextBySlugNotFoundException": {
                    "description": "Context slug not exist from tenantId or global.",
                    "value": {
                      "statusCode": 404,
                      "message": "Context slug not exist from tenantId or global.",
                      "error": "Not Found"
                    }
                  },
                  "TenantContextBySlugAndTenantNotFoundException": {
                    "description": "Tenant context \"slug\" not exist from \"tenantId\"",
                    "value": {
                      "statusCode": 404,
                      "message": "Tenant context \"slug\" not exist from \"tenantId\"",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Context slug not exist from tenantId or global."
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Tenant Contexts"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tenant-contexts/activate-signup/{tenantId}": {
      "get": {
        "operationId": "activateSignup",
        "summary": "",
        "description": "Activate signup for a tenant",
        "deprecated": true,
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "ContextBySlugNotFoundException": {
                    "description": "Context slug not exist from tenantId or global.",
                    "value": {
                      "statusCode": 404,
                      "message": "Context slug not exist from tenantId or global.",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Context slug not exist from tenantId or global."
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Tenant Contexts"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tenant-contexts/deactivate-signup/{tenantId}": {
      "get": {
        "operationId": "deactivateSignup",
        "summary": "",
        "description": "Deactivate signup for a tenant",
        "deprecated": true,
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "ContextBySlugNotFoundException": {
                    "description": "Context slug not exist from tenantId or global.",
                    "value": {
                      "statusCode": 404,
                      "message": "Context slug not exist from tenantId or global.",
                      "error": "Not Found"
                    }
                  },
                  "TenantContextBySlugAndTenantNotFoundException": {
                    "description": "Tenant context \"slug\" not exist from \"tenantId\"",
                    "value": {
                      "statusCode": 404,
                      "message": "Tenant context \"slug\" not exist from \"tenantId\"",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Context slug not exist from tenantId or global."
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Tenant Contexts"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/assets/{tenantId}": {
      "post": {
        "operationId": "requestUpload",
        "summary": "",
        "description": "Creates a new request to upload some asset (image or pdf) in our service. You must use this endpoint response to upload assets using the specific provider apis (ex: Cloudinary)",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestAssetUploadDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Asset upload request successfully created!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetEntityWithProviderUploadParamsDto"
                }
              }
            }
          }
        },
        "tags": [
          "Assets"
        ]
      }
    },
    "/users-status": {
      "post": {
        "operationId": "create",
        "summary": "",
        "description": "Create a new user status",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserStatusDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerStatusDto"
                }
              }
            }
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          }
        },
        "tags": [
          "User Status"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/users-status/{tenantId}/{contextId}/{userId}": {
      "get": {
        "operationId": "getBy",
        "summary": "",
        "description": "Find user status by context, tenant and user",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerStatusDto"
                }
              }
            }
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          }
        },
        "tags": [
          "User Status"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "update",
        "summary": "",
        "description": "Update user status by context, tenant and user",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserStatusDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "Need user with one of these roles: superAdmin, admin"
          }
        },
        "tags": [
          "User Status"
        ],
        "security": [
          {
            "x-w3block-api-key": []
          },
          {
            "x-w3block-id": []
          },
          {
            "x-w3block-secret": []
          },
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Directory",
    "description": "",
    "version": "0.0.1",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "JWT",
        "description": "Enter JWT token",
        "in": "header"
      },
      "x-w3block-api-key": {
        "type": "apiKey",
        "in": "header",
        "name": "x-w3block-api-key",
        "description": "W3block API key"
      },
      "x-w3block-id": {
        "type": "apiKey",
        "in": "header",
        "name": "x-w3block-id",
        "description": "W3block API ID"
      },
      "x-w3block-secret": {
        "type": "apiKey",
        "in": "header",
        "name": "x-w3block-secret",
        "description": "W3block API Secret"
      }
    },
    "schemas": {
      "CreateContextsDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "slug"
        ]
      },
      "ContextDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "description",
          "slug"
        ]
      },
      "UpdateContextsDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "slug"
        ]
      },
      "DuplicatedContextException": {
        "type": "object",
        "properties": {}
      },
      "CreateDataTypesDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "file",
              "url",
              "cpf",
              "phone",
              "text",
              "email"
            ]
          }
        },
        "required": [
          "tenantId",
          "description",
          "label",
          "type"
        ]
      },
      "DataTypesEnum": {
        "type": "string",
        "enum": [
          "file",
          "url",
          "cpf",
          "phone",
          "text",
          "email"
        ]
      },
      "DataTypesDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "example": "cpf",
            "$ref": "#/components/schemas/DataTypesEnum"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "tenantId",
          "label",
          "description",
          "type",
          "enabled"
        ]
      },
      "UpdateDataTypesDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "CreateUserDocumentsDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantParamsId": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "type": "object"
          },
          "mediaType": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          }
        },
        "required": [
          "tenantId",
          "userId",
          "tenantParamsId"
        ]
      },
      "UserDocumentsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantParamsId": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "type": "string"
          },
          "mediaType": {
            "type": "string",
            "nullable": true
          },
          "assetId": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "tenantId",
          "userId",
          "tenantParamsId",
          "value"
        ]
      },
      "UpdateUserDocumentsDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "mediaType": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          }
        },
        "required": [
          "assetId"
        ]
      },
      "CreateUploadSignatureDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantParamsId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "userId",
          "tenantParamsId"
        ]
      },
      "GetUploadSignatureResponseDto": {
        "type": "object",
        "properties": {
          "publicId": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "number"
          },
          "uploadPreset": {
            "type": "string"
          }
        },
        "required": [
          "publicId",
          "signature",
          "timestamp",
          "uploadPreset"
        ]
      },
      "CreateTenantParamsDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "contextId": {
            "type": "string",
            "format": "uuid"
          },
          "dataTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "order": {
            "type": "number"
          },
          "mandatory": {
            "type": "boolean",
            "default": true
          }
        },
        "required": [
          "tenantId",
          "contextId",
          "dataTypeId",
          "order"
        ]
      },
      "TenantParamsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "contextId": {
            "type": "string"
          },
          "dataTypeId": {
            "type": "string"
          },
          "dataTypes": {
            "$ref": "#/components/schemas/DataTypesDto"
          },
          "order": {
            "type": "number"
          },
          "mandatory": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "tenantId",
          "contextId",
          "dataTypeId",
          "order",
          "mandatory",
          "enabled"
        ]
      },
      "UpdateTenantParamsDto": {
        "type": "object",
        "properties": {
          "order": {
            "type": "number"
          },
          "mandatory": {
            "type": "boolean",
            "default": true
          },
          "enabled": {
            "type": "boolean",
            "default": true
          }
        },
        "required": [
          "order"
        ]
      },
      "CreateTenantContextDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "contextId": {
            "type": "string",
            "format": "uuid"
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "nullable": true
          }
        },
        "required": [
          "tenantId",
          "contextId"
        ]
      },
      "TenantContextsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "contextId": {
            "type": "string"
          },
          "context": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ContextDto"
              }
            ]
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "tenantId",
          "contextId",
          "enabled"
        ]
      },
      "AssetTypeEnum": {
        "type": "string",
        "enum": [
          "image",
          "document"
        ]
      },
      "AssetTargetEnum": {
        "type": "string",
        "enum": [
          "userDocument"
        ]
      },
      "RequestAssetUploadDto": {
        "type": "object",
        "properties": {
          "type": {
            "default": "image",
            "example": "image",
            "$ref": "#/components/schemas/AssetTypeEnum"
          },
          "target": {
            "example": "userDocument",
            "$ref": "#/components/schemas/AssetTargetEnum"
          }
        },
        "required": [
          "type",
          "target"
        ]
      },
      "CloudinaryProviderUploadParamsDto": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "example": "000000000000"
          },
          "timestamp": {
            "type": "number",
            "example": 1666215568
          },
          "publicId": {
            "type": "string",
            "example": "directory/3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "signature": {
            "type": "string",
            "example": "bfd09f95f331f558cbd1320e67aa8d488770583e"
          },
          "signedParams": {
            "type": "string",
            "example": "filename_override=false&public_id=directory/3fa85f64-5717-4562-b3fc-2c963f66afa6&timestamp=1666215568&unique_filename=true&upload_preset=upload_preset&api_key=000000000000&signature=bfd09f95f331f558cbd1320e67aa8d488770583e"
          },
          "queryParams": {
            "type": "object",
            "example": {
              "filename_override": "false",
              "public_id": "directory/3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "timestamp": "1666215568",
              "unique_filename": "true"
            }
          },
          "uploadPreset": {
            "type": "string",
            "example": "upload_preset"
          }
        },
        "required": [
          "apiKey",
          "timestamp",
          "publicId",
          "signature",
          "signedParams",
          "queryParams",
          "uploadPreset"
        ]
      },
      "AssetType": {
        "type": "string",
        "enum": [
          "image",
          "document"
        ]
      },
      "AssetStatus": {
        "type": "string",
        "enum": [
          "waitingUpload",
          "waitingAssociation",
          "associated",
          "excluded",
          "expired"
        ]
      },
      "AssetProvider": {
        "type": "string",
        "enum": [
          "cloudinary"
        ]
      },
      "AssetTarget": {
        "type": "string",
        "enum": [
          "userDocument"
        ]
      },
      "AssetEntityWithProviderUploadParamsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "example": "image",
            "$ref": "#/components/schemas/AssetType"
          },
          "status": {
            "example": "associated",
            "$ref": "#/components/schemas/AssetStatus"
          },
          "provider": {
            "example": "cloudinary",
            "$ref": "#/components/schemas/AssetProvider"
          },
          "directLink": {
            "type": "string",
            "example": "https://dummyimage.com/200x200/fff/000",
            "nullable": true
          },
          "target": {
            "example": "userDocument",
            "nullable": true,
            "$ref": "#/components/schemas/AssetTarget"
          },
          "providerUploadParams": {
            "$ref": "#/components/schemas/CloudinaryProviderUploadParamsDto"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "tenantId",
          "type",
          "status",
          "provider",
          "providerUploadParams"
        ]
      },
      "StatusUsersStatuses": {
        "type": "string",
        "enum": [
          "pending",
          "approved",
          "rejected"
        ]
      },
      "CreateUserStatusDto": {
        "type": "object",
        "properties": {
          "contextId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "example": "pending",
            "$ref": "#/components/schemas/StatusUsersStatuses"
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "contextId",
          "tenantId",
          "userId",
          "status"
        ]
      },
      "CustomerStatusDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "contextId": {
            "type": "string",
            "format": "uuid"
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "example": "pending",
            "$ref": "#/components/schemas/StatusUsersStatuses"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "tenantId",
          "userId",
          "contextId",
          "status"
        ]
      },
      "UpdateUserStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "example": "pending",
            "$ref": "#/components/schemas/StatusUsersStatuses"
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      }
    }
  }
}